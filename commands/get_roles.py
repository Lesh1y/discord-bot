"""–í—ã–¥–∞—á–∞ —Ä–æ–ª–µ–π –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º"""
import logging

from discord import RawReactionActionEvent, Member, Role
from discord.ext import commands
from discord.utils import get as get_dc_obj

from modules.conf import PostIds, RolesIds


class Roles(commands.Cog):
    """–†–æ–ª–∏ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º"""
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.post_id = PostIds.roles_post
        self.roles = {
            'üéÆ': RolesIds.gamer, 'üß©': RolesIds.it
        }

    def check_roles(self, payload: RawReactionActionEvent) -> None or tuple[Member, Role, bool]:
        emoji = str(payload.emoji)

        event_filter = any((
            payload.user_id == self.bot.user.id, payload.message_id != self.post_id,
            not self.roles.get(emoji)
        ))

        if event_filter:
            logging.debug(
                '–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É'
            )
            return None

        guild = self.bot.get_guild(payload.guild_id)
        member = get_dc_obj(guild.members, id=payload.user_id) if not payload.member else payload.member
        role = get_dc_obj(guild.roles, id=self.roles[emoji])
        has_role = False

        if role in member.roles:
            has_role = True

        return member, role, has_role

    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload: RawReactionActionEvent) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏'"""
        if not (group := self.check_roles(payload)):
            return

        member, role, has_role = group

        if not has_role:
            await member.add_roles(role)
            logging.info(f'{member} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å "{role}"')
            return

        logging.info(f'{member} —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å "{role}"')

    @commands.Cog.listener()
    async def on_raw_reaction_remove(self, payload):
        """–°–æ–±—ã—Ç–∏–µ '—É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ / —Ä–æ–ª–∏'"""
        if not (group := self.check_roles(payload)):
            return

        member, role, has_role = group

        if has_role:
            await member.remove_roles(role)
            logging.info(f'{member} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª —Ä–æ–ª—å "{role}')

        logging.info(f'{member} –µ—â—ë –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å "{role}"')


async def setup(bot: commands.Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞"""
    await bot.add_cog(Roles(bot))

# TODO: –ü–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏—Ç—å –≤—ã–¥–∞—á—É —Ä–æ–ª–µ–π. –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
#  –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–æ–ª–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º. –í–æ–∑–º–æ–∂–Ω–æ, –≤–Ω–µ–¥—Ä–∏—Ç—å –ë–î –ø–æ–¥ —ç—Ç–æ –¥–µ–ª–æ
